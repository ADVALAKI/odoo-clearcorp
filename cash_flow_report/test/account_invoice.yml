-
  Set the context to be used with supplier invoices
-
  !context
    type: in_invoice
-
  I create a new supplier invoice
-
  !record {model: account.invoice, id: budget_invoice_supplier0, view: account.invoice_supplier_form}:
    date_invoice: !eval datetime.strftime(datetime.today(),'%Y-%m-%d')
    date_due: !eval datetime.strftime(datetime.today(),'%Y-%m-%d')
    supplier_invoice_number: 123456789
    invoice_line:
      - name: Internet Service
        product_id: 93
        quantity: 1
        price_unit: 85000
        program_line_id: 1275
        account_id: 9658
    account_id: 9149
    journal_id: 53
    partner_id: 86
    type: in_invoice
-
  I check that the invoice is a supplier invoice
-
  !assert {model: account.invoice, id: budget_invoice_supplier0, string: This is not a supplier invoice}:
    - type == 'in_invoice'
-
  I check if the account moves cash
-
  !assert {model: account.account, id: 8509, string: This account does not moves cash}:
    - moves_cash == True
-
  I change the state of invoice to open by clicking Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: budget_invoice_supplier0}
-
  I check the state of the budget move to be in execution
-
  !python {model: account.invoice}: |
    inv = self.browse(cr, uid, ref('budget_invoice_supplier0'))
    budget_move = inv.budget_move_id
    assert(budget_move.state == 'in_execution'), 'The budget move is not in execution state'
-
  Set the context to be used with payments
-
  !context
    default_type: payment
    type: payment
-
  I register a single payment for the invoice
-
  !record {model: account.voucher, id: budget_voucher0, view: account_voucher.view_vendor_receipt_dialog_form}:
    partner_id: 86
    amount: 85000
    journal_id: 43
    date: !eval datetime.strftime(datetime.today(),'%Y-%m-%d')
    company_id: 1
-
  I change the state of payment to posted by clicking Validate button
-
  !workflow {model: account.voucher, action: proforma_voucher, ref: budget_voucher0}
-
  I check the state of the budget move to be in executed
-
  !python {model: account.invoice}: |
    inv = self.browse(cr, uid, ref('budget_invoice_supplier0'))
    budget_move = inv.budget_move_id
    assert(budget_move.state == 'executed'), 'The budget move is not in the executed state'

